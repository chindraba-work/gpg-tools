#! /usr/bin/env bash
set -o pipefail

source ./.config

auth_filter='a'
crypt_filter='e'
sign_filter='s'
ecc_filter='..25519'
rsa_filter=':23'

# Routine for error condition messages and aborting.
report_error() { # message
    printf "ERROR: %s Aborting.\n" "$1" >&2
    exit 1
}

# Routine for reporting that there is nothing to do, for whatever reason
report_nothing() { # message
    printf "%s Nothing to do.\n" "$1" >&2
    exit 1
}

# Routine to convert a ring_name to a path
get_ring_path() { # ring_name
    [ -z $1 ] && \
        report_nothing "No keyring name supplied."
    ring_var="ring_${1,,}"
    [ -d "${!ring_var}" ] || \
        report_error "Invalid keyring name $1."
    printf "%s" "${!ring_var}"
}

# Routine to load cert config data
check_config_data() { # config_prefix
    [ -z $1 ] && \
        report_nothing "No config file given."
    [ -e "$config_dir/${1^^}.cfg" ] || \
        report_error "Config file for '$1' not found."
    printf "%s" "$config_dir/${1^^}.cfg"
}

# Routine to check the given keyring for the selected cert
check_prime() { # keyring_path cert_id
    find_id="${2// /}"
    test_id="$(\
        gpg \
            --homedir "$1" \
            --with-colons \
            --list-secret-keys $find_id \
        2>/dev/null \
        | grep -A 1 ^sec \
        | tail -n 1 \
        | awk -F : -e '{printf $10}'\
    )"
    [ 0 -eq $? ] || \
        report_error "Searching keyring $1 for cert id '$2' failed."
    [ "$test_id" == "$find_id" ] || \
        report_error "Searching for $find_id in keyring $1 returned $test_id. Mismatched ID's."
    printf "%s" $test_id
}

# Change the passpharse on a certificate
new_pass() {  # ring_path key_id old_pass new_pass
    checking="$(\
        printf "%s\n%s\n%s\n" "$3" "$4" "$4" \
        | gpg \
            --homedir $1 \
            --batch \
            --yes \
            --expert \
            --pinentry-mode loopback \
            --command-fd 0 --passwd "${2// /}" \
        2>/dev/null\
    )"
    [ 0 -eq $? ] || \
        report_error "Changing passphrase on ${2// /} failed."
}

# Extract public and secret, primary and sub keys to files
store_cert() { # keyring_path data_pfx target_algo
    id_name="${2^^}_${3,,}_sec"
    target_id="$(
        check_prime "$1" "${!id_name}"
    )"
    filter_name="${3,,}_filter"
    algo_filter="${!filter_name}"
    # Save the primary key to files
    store_prime "$1" "$target_id" "${2^^}"
    # Need to have the subkeys stored with a different passpharse than the master
    new_pass "$1" "$target_id" "${pass_main}" "${pass_base}${2^^}"
    for purpose in sign crypt auth; do
        # Save the subkeys to files
        store_subkey
    done
    # Reverse the passpharse change
    new_pass "$1" "$target_id" "${pass_base}${2^^}" "${pass_main}"
}

# Routine to walk through the ECC and RSA pair of certs
store_cert_pair() { # ring_id data_prefix
    keyring_path="$(get_ring_path $1)"
    [ 0 -eq $? ] || \
        report_error "$keyring_path"
    data_file="$(check_config_data $2)"
    [ 0 -eq $? ] || \
        report_error "$data_file"
    source "$data_file"
    for target_algo in ecc rsa; do
        store_cert "$keyring_path" "${2^^}" $target_algo
    done
}

# Extract the primary key to files for storage
store_prime() { # keyring_path key_id data_pfx
printf " IN: %s %s\n" "store_prime" "$(printf "%s " $@)" >&2
    store_prime_pub
    store_prime_sec
    new_pass "$1" "${2// /}" "${pass_main}" "${prime_base}${pass_base}${3^^}"
    store_prime_sec_backup_asc
    store_prime_sec_backup_gpg
    new_pass "$1" "${2// /}" "${prime_base}${pass_base}${3^^}" "${pass_main}"
}

# Store the primary public key of the cert (asc format)
store_prime_pub() {
printf " IN: %s %s\n" "store_prime_pub" "$(printf "%s " $@)" >&2
}

# Store the primary secret key of the cert for backup (gpg format)
store_prime_sec() {
printf " IN: %s %s\n" "store_prime_sec" "$(printf "%s " $@)" >&2
}

# Store the primary secret key of the cert (asc format)
store_prime_sec_backup_asc() {
printf " IN: %s %s\n" "store_prime_sec_backup_asc" "$(printf "%s " $@)" >&2
}

# Store the primary secret key of the cert (gpg format)
store_prime_sec_backup_gpg() {
printf " IN: %s %s\n" "store_prime_sec_backup_gpg" "$(printf "%s " $@)" >&2
}

# Extract the secret and public, and possibly SSH sub keys to files
store_subkey() {
printf " IN: %s %s\n" "store_subkey" "$(printf "%s " $@)" >&2
}

store_cert_pair "$1" "$2"

