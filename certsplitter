#! /usr/bin/env bash
set -o pipefail

source ./.config

auth_filter='a'
crypt_filter='e'
sign_filter='s'
ecc_filter='..25519'
rsa_filter=':23'

# Routine for error condition messages and aborting.
report_error() {
    printf "%s\n" "$1"
    exit 1
}

# Routine to convert a ring_name to a path
get_ring_path() {
    [ -z $1 ] && \
        report_error "No keyring name supplied. Nothing to do."
    var_name="ring_${1,,}"
    test_path="${!var_name}"
    [ -d "$test_path" ] || \
        report_error "Invalid keyring name $1. Nothing to do."
    ring_path="$test_path"
}

# Routine to load cert config data
load_config_data() {
    [ -z $1 ] && \
        report_error "No config file given. Nothing to do."
    config_name="${1^^}"
    config_file="$config_dir/$config_name.cfg"
    [ -e "$config_file" ] || \
        report_error "Config file for '$1' not found. Nothing to do."
    source "$config_file"
    var_name="${config_name}_pfx"
    key_pfx="${!var_name}"
    var_name="${config_name}_title"
    key_title="${!var_name}"
    var_name="${config_name}_user"
    key_user="${!var_name}"
    var_name="${config_name}_primary_uid"
    key_uid="${!var_name}"
    export_root="$system_root/exports/$key_pfx"
    mkdir -p "$system_root/exports"
    extract_root="$system_root/extracts"
    mkdir -p "$system_root/extracts"
}

# Change the passpharse on a certificate
new_pass() {  # $ring_path $cert_id $old_pass $new_pass
    [ -z $1 ] && \
        report_error "No keyring named, not changing passphrase for $change_id in all keyrings."
    change_ring="$1"
    change_id="${2// /}"
    checking="$(printf "%s\n%s\n%s\n" "$3" "$4" "$4" | gpg --homedir $change_ring --batch --yes --expert --pinentry-mode loopback --command-fd 0 --passwd "$change_id" 2>/dev/null)"
    [ 0 == $? ] || \
        report_error "Changing passphrase on $change_id failed."
}

# Extract public and secret, primary and sub keys to files
store_cert() { # $algo
    [ -z $1 ] && \
        report_error "No algorithm specified. Cannot select a single cert. Aborting."
    algo="${1,,}"
    var_name="${config_name}_${algo}_sec"
    cert_id="${!var_name}"
    var_name="${algo}_filter"
    algo_filter="${!var_name}"
    dest_base="$export_root.$algo.key"
    # Save the primary key to files
    store_prime
    # Need to have the subkeys stored with a different passpharse than the master
    new_pass "$ring_path" "$cert_id" "${pass_main}" "${pass_base}${config_name}"
    for purpose in sign crypt auth; do
        # Save the subkeys to files
        store_subkey
    done
    # Reverse the passpharse change
    new_pass "$ring_path" "$cert_id" "${pass_base}${config_name}" "${pass_main}"
}

# Routine to walk through the ECC and RSA pair of certs
store_cert_pair() { # $ring_id $cert_id
    load_config_data $2
    get_ring_path $1
    for target_algo in ecc rsa; do
        store_cert $target_algo
    done
}

# Extract the primary key to files for storage
store_prime() {
printf "%s\n" " IN: store_prime"
}

# Extract the secret and public, and possibly SSH sub keys to files
store_subkey() {
printf " IN: %s\n" "store_subkey"
}

store_cert_pair "$1" "$2"

